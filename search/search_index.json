{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pyvint's documentation!","text":"<p>A pure Python library for encoding and decoding Variable-Sized Integer (VINT) values. VINT is used in EBML (Extensible Binary Meta Language) to encode integers with a variable number of bytes. Detailed information about VINT can be found in the Extensible Binary Meta Language RFC 8794</p>"},{"location":"#installation","title":"Installation","text":"<p>The library is available on PyPI and can be installed using pip:</p> <pre><code>pip install pyvint\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#encoding-integer-to-vint","title":"Encoding (Integer to VINT)","text":"<pre><code>import pyvint\n\nvint = pyvint.encode(2)  # just passing an integer returns the minimum length VINT\nprint(vint)  # b'\\x82'\nvint2 = pyvint.encode(2, 2)  # passing an integer and the octet length returns a VINT with the specified octet length\nprint(vint2)  # b'\\x40\\x02'\n</code></pre>"},{"location":"#decoding-vint-to-integer","title":"Decoding (VINT to Integer)","text":"<pre><code>import pyvint\n\nvalue = pyvint.decode(b'\\x82')\nprint(value)  # 2\nvalue2 = pyvint.decode(b'\\x40\\x02')\nprint(value2)  # 2\n</code></pre> <p><code>pyvint</code> also provides decoding of VINTs from a stream of bytes. This is useful when reading VINTs from a file or a network stream. The <code>decode_stream</code> function returns the integer value of the VINT and advances the buffer to the next byte after the VINT.</p> <pre><code>from io import BytesIO\nimport pyvint\n\ndata = b'\\x82\\x40\\x02'\nbuffer = BytesIO(data)\nvalue = pyvint.decode_stream(data)\nprint(value)  # 2\nprint(buffer.read())  # b'\\x40\\x02'\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#pyvint.decode","title":"<code>decode(vint)</code>","text":"<p>Decode a Variable-Size Integer (VINT).</p> <p>Parameters:</p> Name Type Description Default <code>vint</code> <code>bytes</code> <p>The bytes representing the VINT.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The decoded integer.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; decode(b'\\x82')\n2\n&gt;&gt;&gt; decode(b'\\x10\\x00\\x00\\x02')\n2\n&gt;&gt;&gt; decode(b'\\xff')\n127\n&gt;&gt;&gt; decode(b'\\x01')\nTraceback (most recent call last):\n ...\nValueError: Invalid VINT.\n</code></pre> Source code in <code>src/pyvint/core.py</code> <pre><code>def decode(vint: bytes) -&gt; int:\n    r\"\"\"\n    Decode a Variable-Size Integer (VINT).\n\n    Args:\n        vint (bytes): The bytes representing the VINT.\n\n    Returns:\n        The decoded integer.\n\n    Examples:\n        &gt;&gt;&gt; decode(b'\\x82')\n        2\n        &gt;&gt;&gt; decode(b'\\x10\\x00\\x00\\x02')\n        2\n        &gt;&gt;&gt; decode(b'\\xff')\n        127\n        &gt;&gt;&gt; decode(b'\\x01')\n        Traceback (most recent call last):\n         ...\n        ValueError: Invalid VINT.\n    \"\"\"\n    octet_length = 0\n    for b in vint:\n        leading_zeros = _count_leading_zeros_in_char(b)\n        octet_length += leading_zeros\n        if leading_zeros &lt; 8:\n            break\n    if len(vint) != octet_length + 1:\n        raise ValueError(\"Invalid VINT.\")\n    return _decode_impl(vint)\n</code></pre>"},{"location":"api/#pyvint.decode_stream","title":"<code>decode_stream(stream)</code>","text":"<p>Decode a Variable-Size Integer (VINT) from a stream.</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <code>IOBase[bytes]</code> <p>The stream to read the VINT from.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The decoded integer.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; stream = BytesIO(b'\\x82')\n&gt;&gt;&gt; decode_stream(stream)\n2\n&gt;&gt;&gt; stream = BytesIO(b'\\x40\\x02\\x00')\n&gt;&gt;&gt; decode_stream(stream)\n2\n&gt;&gt;&gt; stream.read()\nb'\\x00'\n</code></pre> Source code in <code>src/pyvint/core.py</code> <pre><code>def decode_stream(stream: BytesIO) -&gt; int:\n    r\"\"\"\n    Decode a Variable-Size Integer (VINT) from a stream.\n\n    Args:\n        stream (IOBase[bytes]): The stream to read the VINT from.\n\n    Returns:\n        The decoded integer.\n\n    Examples:\n        &gt;&gt;&gt; from io import BytesIO\n        &gt;&gt;&gt; stream = BytesIO(b'\\x82')\n        &gt;&gt;&gt; decode_stream(stream)\n        2\n        &gt;&gt;&gt; stream = BytesIO(b'\\x40\\x02\\x00')\n        &gt;&gt;&gt; decode_stream(stream)\n        2\n        &gt;&gt;&gt; stream.read()\n        b'\\x00'\n    \"\"\"\n    return _decode_impl(read_vint(stream))\n</code></pre>"},{"location":"api/#pyvint.encode","title":"<code>encode(value, octet_length=None)</code>","text":"<p>Encode an integer to a Variable-Size Integer (VINT). You can specify the octet length of the VINT. If you don't specify it, the function will calculate it automatically. This function doesn't support negative integers, which causes a ValueError to be raised. You will get a ValueError if the octet length is less than the calculated one.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The integer to encode.</p> required <code>octet_length</code> <code>Optional[int]</code> <p>The octet length of the VINT. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The bytes representing the VINT.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; encode(2)\nb'\\x82'\n&gt;&gt;&gt; encode(89)\nb'\\xd9'\n&gt;&gt;&gt; encode(0)\nb'\\x80'\n&gt;&gt;&gt; encode(0, 2)\nb'@\\x00'\n&gt;&gt;&gt; encode(172351395)\nb'\\x1aE\\xdf\\xa3'\n&gt;&gt;&gt; encode(2, 2)\nb'@\\x02'\n</code></pre> Source code in <code>src/pyvint/core.py</code> <pre><code>def encode(value: int, octet_length: Optional[int] = None) -&gt; bytes:\n    r\"\"\"\n    Encode an integer to a Variable-Size Integer (VINT).\n    You can specify the octet length of the VINT. If you don't specify it, the function will calculate it automatically.\n    This function doesn't support negative integers, which causes a ValueError to be raised.\n    You will get a ValueError if the octet length is less than the calculated one.\n\n    Args:\n        value (int): The integer to encode.\n        octet_length (Optional[int]): The octet length of the VINT. Defaults to None.\n\n    Returns:\n        The bytes representing the VINT.\n\n    Examples:\n        &gt;&gt;&gt; encode(2)\n        b'\\x82'\n        &gt;&gt;&gt; encode(89)\n        b'\\xd9'\n        &gt;&gt;&gt; encode(0)\n        b'\\x80'\n        &gt;&gt;&gt; encode(0, 2)\n        b'@\\x00'\n        &gt;&gt;&gt; encode(172351395)\n        b'\\x1aE\\xdf\\xa3'\n        &gt;&gt;&gt; encode(2, 2)\n        b'@\\x02'\n    \"\"\"\n    if value &lt; 0:\n        raise ValueError(\"The value must be non-negative.\")\n    b128_length = math.floor(math.log(value, 128)) + 1 if value &gt; 0 else 1\n    if octet_length is None:\n        octet_length_ = b128_length\n    else:\n        if octet_length &lt; b128_length:\n            raise ValueError(\"Invalid octet length.\")\n        octet_length_ = octet_length\n    buf = bytearray(value.to_bytes(octet_length_, byteorder=\"big\"))\n    buf[(octet_length_ - 1) // 8] |= 0x80 &gt;&gt; ((octet_length_ + 7) % 8)\n    return bytes(buf)\n</code></pre>"},{"location":"api/#pyvint.read_vint","title":"<code>read_vint(stream)</code>","text":"<p>Read a Variable-Size Integer (VINT) from a stream.</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <code>IOBase[bytes]</code> <p>The stream to read the VINT from.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The VINT bytes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; stream = BytesIO(b'\\x82')\n&gt;&gt;&gt; read_vint(stream)\nb'\\x82'\n&gt;&gt;&gt; stream = BytesIO(b'\\x40\\x02\\x00')\n&gt;&gt;&gt; read_vint(stream)\nb'@\\x02'\n&gt;&gt;&gt; stream.read()\nb'\\x00'\n</code></pre> Source code in <code>src/pyvint/core.py</code> <pre><code>def read_vint(stream: BytesIO) -&gt; bytes:\n    r\"\"\"\n    Read a Variable-Size Integer (VINT) from a stream.\n\n    Args:\n        stream (IOBase[bytes]): The stream to read the VINT from.\n\n    Returns:\n        The VINT bytes.\n\n    Examples:\n        &gt;&gt;&gt; from io import BytesIO\n        &gt;&gt;&gt; stream = BytesIO(b'\\x82')\n        &gt;&gt;&gt; read_vint(stream)\n        b'\\x82'\n        &gt;&gt;&gt; stream = BytesIO(b'\\x40\\x02\\x00')\n        &gt;&gt;&gt; read_vint(stream)\n        b'@\\x02'\n        &gt;&gt;&gt; stream.read()\n        b'\\x00'\n    \"\"\"\n    octet_length = 0\n    while True:\n        b = stream.read(1)\n        if not b:\n            raise ValueError(\"Invalid VINT.\")\n        leading_zeros = _count_leading_zeros_in_char(b[0])\n        octet_length += leading_zeros\n        if leading_zeros &lt; 8:\n            break\n    remaining = octet_length - octet_length // 8\n    remaining_bytes = stream.read(remaining)\n    if len(remaining_bytes) != remaining:\n        raise ValueError(\"Invalid VINT.\")\n    return b\"\\x00\" * (octet_length // 8) + b + remaining_bytes\n</code></pre>"}]}